---
title: "👨🏾‍💻API Developer Portal Setup (Swagger)"
sidebar: pipelines
---

# Setting Up the API Developer Portal with Swagger UI

## Why Create an API Developer Portal?

Once your data is available through a RESTful interface (via PostgREST), the next step is to **document** it and make it easy for developers to discover and test. This is where **Swagger UI** comes in.

### What is Swagger?

[Swagger UI](https://swagger.io/tools/swagger-ui/) is an open-source interface that visualizes APIs using the **OpenAPI specification**. It allows developers to:
- 📖 Read documentation for your API endpoints.
- 🔎 Explore input and output parameters.
- 🧪 Interactively test endpoints with live data.
- 🤝 Share API functionality with frontend developers and integrators.

Swagger connects seamlessly with **PostgREST**, which automatically serves an OpenAPI schema that Swagger can consume.

📚 References:
- [Swagger UI Docs](https://swagger.io/tools/swagger-ui/)
- [PostgREST OpenAPI Support](https://postgrest.org/en/stable/api.html#openapi)

---

## Step-by-Step: Deploy Swagger in Railway

### Create the Swagger Service

1. In Railway, click **Create** → **New Service**.
2. Select **Docker Image**.
3. Type in the image name:
   ```
   swaggerapi/swagger-ui
   ```
4. Press **Enter**, then click **Deploy**.

---

### Add the API URL Environment Variable

Once the service is deployed:

1. Go to the **Environment Variables** tab.
2. Click **New Variable** and add:

| Key      | Value                                      |
|----------|--------------------------------------------|
| `API_URL`| `${{postgrest.PGRST_OPENAPI_SERVER_PROXY_URI}}` |

> ✅ This tells Swagger where to fetch the OpenAPI specification generated by PostgREST. It allows Swagger to automatically read and render your live API documentation.

---

### Redeploy the Swagger Service

After setting the `API_URL` environment variable:

1. Click **Deploy** again to apply the change.

---

### Generate a Public URL for Swagger

1. Navigate to the **Settings** tab of the Swagger service.
2. Under **Networking**, click **Generate Domain**.
3. Choose the **default port: 8080**.
4. Click **Deploy**.

Once deployment is complete, a **public URL** will appear.

---

## ✅ Test the Swagger UI

Open the **public URL** you generated. If everything was configured correctly, you should see the **Swagger UI** load your API documentation automatically. You’ll be able to:

- View your `general_aviation_weather_view` endpoint.
- Click to expand and see parameters, response schema, and sample data.
- Run test requests directly from the browser.

---

## 🎉 Summary

- ✅ Swagger UI provides a developer-friendly interface to your API.
- ✅ It connects automatically to PostgREST using the OpenAPI spec.
- ✅ Your live API is now self-documenting, testable, and ready to share.

You now have a complete pipeline: **data ingestion → transformation → structured storage → API → developer docs**.
